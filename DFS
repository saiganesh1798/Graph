import java.util.*;
public class Graph {
 private final int vertices;
 private final List<List<Integer>>adjList;
 Graph(int vertices)
 {
 this.vertices=vertices;
 adjList=new ArrayList<>(vertices);
 for(int i=0;i<vertices;i++)
 {
 adjList.add(new LinkedList<>());
 }
 }
 void addEdge(int source,int destination)
 {
 adjList.get(source).add(destination);
 adjList.get(destination).add(source);
 }
 void DFS(int startVertex)
 {
 boolean[] visited=new boolean[vertices];
 DFSUTIL(startVertex,visited);
 }
private void DFSUTIL(int vertex,boolean[] visited)
{
visited[vertex] = true;
System.out.print(vertex+" ");
for(int adj: adjList.get(vertex))
{
if(!visited[adj])
{
DFSUTIL(adj,visited);
}
}
}
public static void main (String[] args) {
Graph graph = new Graph(5);
graph.addEdge(0,1);
graph.addEdge(0,2);
graph.addEdge(1,2);
graph.addEdge(1,4);
graph.addEdge(1,3);
graph.addEdge(2,4);
graph.addEdge(3,4);
System.out.println("following is depth First Traversal(starting from vertex)");
graph.DFS(2);
}
}



Output::following is depth First Traversal(starting from vertex)
        2 0 1 4 3 
